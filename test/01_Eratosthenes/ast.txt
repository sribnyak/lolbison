Program(
    version="1.2",
    statements=[
        VarDecl(
            name="N",
            value=NumberLiteral(value=100)
        ),
        ArrayDecl(name="array"),
        Loop(
            name="loop",
            head=IncrementLoopHead(
                counter="index",
                condition=LoopUntil(
                    condition=BinaryEq(
                        lhs=Identifier(name="index"),
                        rhs=Identifier(name="N")
                    )
                )
            ),
            statements=[
                ArrayNewIndex(
                    array_name="array",
                    index=Identifier(name="index"),
                    value=BooleanLiteral(value=true)
                ),
            ]
        ),
        ArrayAssign(
            array_name="array",
            index=NumberLiteral(value=0),
            value=BooleanLiteral(value=false)
        ),
        ArrayAssign(
            array_name="array",
            index=NumberLiteral(value=1),
            value=BooleanLiteral(value=false)
        ),
        Print(
            arguments=[
                StringLiteral(value="READY TO SURCH 4 YR PRIMES"),
            ],
            suppress_newline=false
        ),
        Loop(
            name="loop",
            head=IncrementLoopHead(
                counter="step",
                condition=LoopUntil(
                    condition=BinaryEq(
                        lhs=Identifier(name="step"),
                        rhs=Identifier(name="N")
                    )
                )
            ),
            statements=[
                ExprStatement(
                    expression=ArrayAccess(
                        array_name="array",
                        index=Identifier(name="step")
                    )
                ),
                IfThen(
                    true_statements=[
                        Print(
                            arguments=[
                                Identifier(name="step"),
                                StringLiteral(value=" IZ PRIME"),
                            ],
                            suppress_newline=false
                        ),
                        VarDecl(
                            name="cumpound",
                            value=BinaryMul(
                                lhs=Identifier(name="step"),
                                rhs=Identifier(name="step")
                            )
                        ),
                        Loop(
                            name="inner_loop",
                            head=null,
                            statements=[
                                ExprStatement(
                                    expression=BinaryEq(
                                        lhs=Identifier(name="cumpound"),
                                        rhs=BinaryMax(
                                            lhs=Identifier(name="cumpound"),
                                            rhs=Identifier(name="N")
                                        )
                                    )
                                ),
                                IfThen(
                                    true_statements=[
                                        Break(),
                                    ],
                                    false_statements=[
                                    ]
                                ),
                                ArrayAssign(
                                    array_name="array",
                                    index=Identifier(name="cumpound"),
                                    value=BooleanLiteral(value=false)
                                ),
                                VarAssign(
                                    name="cumpound",
                                    value=BinarySum(
                                        lhs=Identifier(name="cumpound"),
                                        rhs=Identifier(name="step")
                                    )
                                ),
                            ]
                        ),
                    ],
                    false_statements=[
                    ]
                ),
            ]
        ),
        Print(
            arguments=[
                StringLiteral(value="FOUND ALL YR PRIMES SMALLR THAN "),
                Identifier(name="N"),
            ],
            suppress_newline=false
        ),
    ]
)
